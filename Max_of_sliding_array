//Maximum of all silding array's of size k
#include <iostream>
#include <deque>
#include <vector>
using namespace std;

vector<int> max_of_subarrays(vector<int>& arr, int N, int K) {
    deque<int> dq;
    vector<int> result;
    
    // Process first K elements
    for (int i = 0; i < K; ++i) {
        // Remove elements from the back of the deque if they are smaller
        // than the current element
        while (!dq.empty() && arr[dq.back()] <= arr[i])
            dq.pop_back();
        dq.push_back(i);
    }
    
    // Process the rest of the elements
    for (int i = K; i < N; ++i) {
        // The element at the front of the deque is the largest element
        // of the previous window, so add to results
        result.push_back(arr[dq.front()]);
        
        // Remove elements which are out of this window
        while (!dq.empty() && dq.front() <= i - K)
            dq.pop_front();
        
        // Remove elements from the back if they are smaller than
        // the current element
        while (!dq.empty() && arr[dq.back()] <= arr[i])
            dq.pop_back();
        
        // Add the current element at the back of the deque
        dq.push_back(i);
    }
    
    // Add the maximum for the last window
    result.push_back(arr[dq.front()]);
    
    return result;
}

int main() {
    vector<int> arr;
   int N, ele;
   cin>>N;
    int K = 3;
    for(int i =0; i<N; i++){
        cin>>ele;
        arr.push_back(ele);
    }
    vector<int> result = max_of_subarrays(arr, N, K);
    
    for (int max : result) {
        cout << max << " ";
    }
    
    return 0;
}
